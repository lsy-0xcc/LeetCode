//给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复
//的三元组。 
//
// 注意：答案中不可以包含重复的三元组。 
//
// 
//
// 示例： 
//
// 给定数组 nums = [-1, 0, 1, 2, -1, -4]，
//
//满足要求的三元组集合为：
//[
//  [-1, 0, 1],
//  [-1, -1, 2]
//]
// 
// Related Topics 数组 双指针 
// 👍 2704 👎 0

package editor.cn;

import java.util.*;

//Java：三数之和
public class Q15ThreeSum {
    public static void main(String[] args) {
        Solution solution = new Q15ThreeSum().new Solution();
        //  test
        int[] input = {34, 55, 79, 28, 46, 33, 2, 48, 31, -3, 84, 71, 52, -3, 93, 15, 21, -43, 57, -6, 86, 56, 94, 74, 83, -14, 28, -66, 46, -49, 62, -11, 43, 65, 77, 12, 47, 61, 26, 1, 13, 29, 55, -82, 76, 26, 15, -29, 36, -29, 10, -70, 69, 17, 49};
        System.out.println(solution.threeSum(input));
        // 解答失败: 测试用例:[34,55,79,28,46,33,2,48,31,-3,84,71,52,-3,93,15,21,-43,57,-6,86,56,94,74,83,-14,28,-66,46,-49,62,-11,43,65,77,12,47,61,26,1,13,29,55,-82,76,26,15,-29,36,-29,10,-70,69,17,49] 测试结果:[[-14,-3,17],[-11,-6,17],[-29,-14,43],[-43,-3,46],[-43,-6,49],[-49,-3,52],[-49,-6,55],[-43,-14,57],[-66,-3,69],[-70,-6,76],[-66,-11,77],[-70,-14,84],[-82,-11,93],[-3,1,2],[-11,1,10],[-14,1,13],[-14,2,12],[-29,1,28],[-29,12,17],[-29,1,28],[-29,12,17],[-43,10,33],[-43,12,31],[-43,15,28],[-43,17,26],[-49,1,48],[-49,2,47],[-49,13,36],[-49,15,34],[-49,21,28],[-66,1,65],[-66,10,56],[-66,17,49],[-70,1,69],[-70,13,57],[-70,15,55],[-70,21,49],[-70,34,36],[-82,13,69],[-82,17,65],[-82,21,61],[-82,26,56],[-82,33,49],[-82,34,48],[-82,36,46]] 期望结果:[[-82,-11,93],[-82,13,69],[-82,17,65],[-82,21,61],[-82,26,56],[-82,33,49],[-82,34,48],[-82,36,46],[-70,-14,84],[-70,-6,76],[-70,1,69],[-70,13,57],[-70,15,55],[-70,21,49],[-70,34,36],[-66,-11,77],[-66,-3,69],[-66,1,65],[-66,10,56],[-66,17,49],[-49,-6,55],[-49,-3,52],[-49,1,48],[-49,2,47],[-49,13,36],[-49,15,34],[-49,21,28],[-43,-14,57],[-43,-6,49],[-43,-3,46],[-43,10,33],[-43,12,31],[-43,15,28],[-43,17,26],[-29,-14,43],[-29,1,28],[-29,12,17],[-14,-3,17],[-14,1,13],[-14,2,12],[-11,-6,17],[-11,1,10],[-3,1,2]]

    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {
        public List<List<Integer>> threeSum(int[] nums) {
            Arrays.sort(nums);
            Set<List<Integer>> resultMap = new HashSet<>();
            for (int i = 0; i < nums.length; i++) {
                int j = i + 1;
                int k = nums.length - 1;
                while (j < k) {
                    int sum = nums[i] + nums[j] + nums[k];
                    if (sum < 0) {
                        j++;
                    } else if (sum > 0) {
                        k--;
                    } else {
                        resultMap.add(new ArrayList<>(Arrays.asList(nums[i] , nums[j] , nums[k])));
                        j++;
                        k--;
                    }
                }
            }
            List<List<Integer>> result = new ArrayList<>(resultMap);
            result.sort((o1, o2) -> {
                for (int i = 0; i < 3; i++) {
                    if (!o1.get(i).equals(o2.get(i))) {
                        return o1.get(i) - o2.get(i);
                    }
                }
                return 0;
            });
            return result;
        }
    }

//leetcode submit region end(Prohibit modification and deletion)

}